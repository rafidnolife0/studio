
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin() {
      // Ensure request.auth and request.auth.token are not null before accessing email
      return request.auth != null && request.auth.token != null && request.auth.token.email == 'admin@banglashop.com';
    }

    // Products can be read by anyone, but only written by admins
    match /products/{productId} {
      allow read: if true;
      allow write: if isAdmin(); // create, update, delete
    }

    // Users collection:
    // - Users can create their own user document (e.g., on registration).
    // - Users can read and update their own document.
    // - Admins can read any user document.
    // - No one can delete user documents through client-side requests for safety.
    match /users/{userId} {
      allow create: if request.auth != null && request.auth.uid == userId;
      // Allow read if the user is accessing their own document OR if the user is an admin
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin());
      allow update: if request.auth != null && request.auth.uid == userId;
      allow delete: if false; // Prevent client-side deletion for safety
    }

    // Orders collection:
    // - Authenticated users can create their own orders (userId in document must match auth.uid).
    // - Users can read their own orders.
    // - Admins can read and update (e.g., change status) any order.
    // - Deletion of orders might be restricted or admin-only.
    match /orders/{orderId} {
      // User creating the order must be authenticated and the userId in the order data must match their uid
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // Allow read if the user is accessing their own order OR if the user is an admin
      allow read: if request.auth != null && (resource.data.userId == request.auth.uid || isAdmin());
      allow update: if isAdmin(); // Admins can update order status, etc.
      allow delete: if isAdmin(); // Only admins can delete orders
    }

    // Default deny all other paths not explicitly matched
    // This is a good security practice.
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

    